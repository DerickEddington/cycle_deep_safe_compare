[package]
name = "graph_safe_compare"
version = "0.2.1"
description = "Equivalence predicate that can handle cyclic, shared, and very-deep graphs."
authors = ["Derick Eddington"]
license = "Unlicense"
repository = "https://github.com/DerickEddington/graph_safe_compare"
edition = "2021"
rust-version = "1.62"
readme = "README.md"
categories = ["algorithms", "no-std"]
keywords = ["graphs", "cyclic", "equivalence", "comparison", "no_std"]

[workspace]
# The `test_no_std` package is independent, not a member of the workspace, so
# that it can use different settings, since it's a peculiar kind of integration test.
exclude = ["test_no_std"]

[features]
default = ["std", "wyrng"]
std = ["alloc"]
alloc = []
wyrng = ["wyhash"]
anticipate = []  # Causes breaking changes, to use different Rust features.

[dependencies]
cfg-if = "1"
# Your choice of (pseudo)random-number generator.  If your project is already
# using one, you could choose that same one, to have only a single (P)RNG
# dependency.  It is easy to use one that was not already here, if you want,
# either, by adding a module to `src/cycle_safe/modes/interleave/random/mod.rs`
# (which allows using it as the default with the premade functionality), or by
# directly giving your own type as argument for the generic parameter (e.g. see
# `tests/custom.rs`).  Enabling multiple is allowed (but unusual) but only one
# will be the default (based on hard-coded priority).
fastrand = { version = "1", optional = true }
# The below support `no_std` and are configured as such here.
oorandom = { version = "11", optional = true }
wyhash = { version = "0.5", optional = true }

[dev-dependencies]
tests_utils = { path = "tests_utils" }

[build-dependencies]
cfg_rust_features = "0.1"

[[example]]
name = "derived_eq"
crate-type = ["lib"]
test = true

[[test]]
name = "borrow_pair"
required-features = ["std"]

# Note: The "custom" test does not require any features.

[[test]]
name = "diff_edge"
required-features = ["std"]

[[test]]
name = "diff_index"
required-features = ["std"]

[[test]]
name = "dyn_pair"
required-features = ["std"]

[[test]]
name = "rc_pair"
required-features = ["std"]

[[test]]
name = "lazy"
required-features = ["std"]

# Note: The "wide" test can still run some tests with reduced features.

[profile.bench-max-optim]
inherits = "bench"
lto = true
codegen-units = 1

[package.metadata.docs.rs]
features = ["std", "fastrand", "oorandom", "wyrng"]
